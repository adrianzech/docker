services:
  database:
    container_name: tandoor-database
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${DATABASE_NAME} -U $${DATABASE_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - /opt/docker/appdata/tandoor/database:/var/lib/postgresql/data
    networks:
      - tandoor

  tandoor:
    container_name: tandoor
    image: vabene1111/recipes
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DB_ENGINE: django.db.backends.postgresql
      POSTGRES_HOST: database
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    labels:
      traefik.enable: true
      traefik.http.routers.tandoor.entrypoints: http
      traefik.http.routers.tandoor.rule: Host(`${BASE_URL}`)
      traefik.http.middlewares.tandoor-https-redirect.redirectscheme.scheme: https
      traefik.http.routers.tandoor.middlewares: tandoor-https-redirect
      traefik.http.routers.tandoor-secure.entrypoints: https
      traefik.http.routers.tandoor-secure.rule: Host(`${BASE_URL}`)
      traefik.http.routers.tandoor-secure.tls: true
      traefik.http.routers.tandoor-secure.service: tandoor
      traefik.http.routers.tandoor-secure.middlewares: default-headers@file
      traefik.http.services.tandoor.loadbalancer.server.port: ${PORT}
      traefik.docker.network: proxy
    volumes:
      - /opt/docker/appdata/tandoor/staticfiles:/opt/recipes/staticfiles
      - /opt/docker/appdata/tandoor/mediafiles:/opt/recipes/mediafiles
    networks:
      - proxy
      - tandoor
    depends_on:
      - database

networks:
  proxy:
    external: true
  tandoor:
    external: true
